name: Sync Gitee to GitHub

on:
  push:
    branches:
      - master # 监听 Gitee (你的源仓库) 的 master 分支
      - main   # 如果你的 GitHub (目标仓库) 有其他推送，也监听
  workflow_dispatch: # 允许手动触发工作流

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add Gitee Remote
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GITEE_PRIVATE_KEY }}" > ~/.ssh/gitee_key
          chmod 600 ~/.ssh/gitee_key
          echo "Host gitee.com" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/gitee_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

          # 添加 Gitee 作为新的远程仓库
          git remote add gitee git@gitee.com:shivermin/my-obsidian.git
          # !!! 务必替换为你的实际 Gitee 仓库 SSH 地址 !!!

      - name: Fetch from Gitee
        run: |
          git fetch gitee --tags # 拉取 Gitee 的所有分支和标签

      - name: Sync Gitee Master to GitHub Main
        run: |
          # 1. 确保在正确的本地分支上工作（GitHub 的主分支是 main）
          git checkout main

          # 2. 从 Gitee 的 master 分支拉取代码并与本地 main 分支合并（rebase 方式更整洁）
          # 这会将 Gitee master 的所有提交应用到 GitHub main 分支的顶部
          git pull gitee master --rebase

          # 3. 强制推送到 GitHub 的 main 分支
          # --force 会覆盖 GitHub 上的 main 分支，确保 Gitee master 是权威源
          git push origin main --force

      - name: Sync Other Branches (Optional)
        run: |
          # 遍历 Gitee 的所有分支并推送到 GitHub
          # 如果你的Gitee有很多非master分支需要同步，可以保留此步骤
          # 注意：这里会尝试将 Gitee 的所有分支（除了 master）以同名推送到 GitHub
          for branch in $(git branch -r | grep 'gitee/' | sed 's/gitee\///g' | grep -v 'HEAD' | grep -v 'master'); do
            git checkout -B $branch gitee/$branch
            git push origin $branch --force
          done

      - name: Sync Tags (Optional)
        run: |
          git push origin --tags # 推送所有标签
